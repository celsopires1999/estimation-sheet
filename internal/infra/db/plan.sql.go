// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: plan.sql

package db

import (
	"context"

	domain "github.com/celsopires1999/estimation/internal/domain"
	"github.com/jackc/pgx/v5/pgtype"
)

const deletePlan = `-- name: DeletePlan :one
DELETE FROM plans WHERE plan_id = $1 RETURNING plan_id, code, name, assumptions, created_at, updated_at
`

func (q *Queries) DeletePlan(ctx context.Context, planID string) (Plan, error) {
	row := q.db.QueryRow(ctx, deletePlan, planID)
	var i Plan
	err := row.Scan(
		&i.PlanID,
		&i.Code,
		&i.Name,
		&i.Assumptions,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findAllPlans = `-- name: FindAllPlans :many
SELECT plan_id, code, name, assumptions, created_at, updated_at FROM plans
`

func (q *Queries) FindAllPlans(ctx context.Context) ([]Plan, error) {
	rows, err := q.db.Query(ctx, findAllPlans)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Plan
	for rows.Next() {
		var i Plan
		if err := rows.Scan(
			&i.PlanID,
			&i.Code,
			&i.Name,
			&i.Assumptions,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findPlanByCode = `-- name: FindPlanByCode :one
SELECT plan_id, code, name, assumptions, created_at, updated_at FROM plans WHERE code = $1
`

func (q *Queries) FindPlanByCode(ctx context.Context, code string) (Plan, error) {
	row := q.db.QueryRow(ctx, findPlanByCode, code)
	var i Plan
	err := row.Scan(
		&i.PlanID,
		&i.Code,
		&i.Name,
		&i.Assumptions,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findPlanById = `-- name: FindPlanById :one
SELECT plan_id, code, name, assumptions, created_at, updated_at FROM plans WHERE plan_id = $1
`

func (q *Queries) FindPlanById(ctx context.Context, planID string) (Plan, error) {
	row := q.db.QueryRow(ctx, findPlanById, planID)
	var i Plan
	err := row.Scan(
		&i.PlanID,
		&i.Code,
		&i.Name,
		&i.Assumptions,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertPlan = `-- name: InsertPlan :exec
INSERT INTO
    plans (
        plan_id,
        code,
        name,
        assumptions,
        created_at
    )
VALUES ($1, $2, $3, $4, $5)
`

type InsertPlanParams struct {
	PlanID      string
	Code        string
	Name        string
	Assumptions domain.Assumptions
	CreatedAt   pgtype.Timestamp
}

func (q *Queries) InsertPlan(ctx context.Context, arg InsertPlanParams) error {
	_, err := q.db.Exec(ctx, insertPlan,
		arg.PlanID,
		arg.Code,
		arg.Name,
		arg.Assumptions,
		arg.CreatedAt,
	)
	return err
}

const updatePlan = `-- name: UpdatePlan :one
UPDATE plans
SET
    code = $2,
    name = $3,
    assumptions = $4,
    updated_at = $5
WHERE
    plan_id = $1
RETURNING
    plan_id, code, name, assumptions, created_at, updated_at
`

type UpdatePlanParams struct {
	PlanID      string
	Code        string
	Name        string
	Assumptions domain.Assumptions
	UpdatedAt   pgtype.Timestamp
}

func (q *Queries) UpdatePlan(ctx context.Context, arg UpdatePlanParams) (Plan, error) {
	row := q.db.QueryRow(ctx, updatePlan,
		arg.PlanID,
		arg.Code,
		arg.Name,
		arg.Assumptions,
		arg.UpdatedAt,
	)
	var i Plan
	err := row.Scan(
		&i.PlanID,
		&i.Code,
		&i.Name,
		&i.Assumptions,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
