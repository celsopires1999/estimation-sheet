// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: baseline.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteBaseline = `-- name: DeleteBaseline :one
DELETE FROM baselines WHERE baseline_id = $1 RETURNING baseline_id, code, title, description, start_date, duration, manager_id, estimator_id, created_at, updated_at
`

func (q *Queries) DeleteBaseline(ctx context.Context, baselineID string) (Baseline, error) {
	row := q.db.QueryRow(ctx, deleteBaseline, baselineID)
	var i Baseline
	err := row.Scan(
		&i.BaselineID,
		&i.Code,
		&i.Title,
		&i.Description,
		&i.StartDate,
		&i.Duration,
		&i.ManagerID,
		&i.EstimatorID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findBaselineById = `-- name: FindBaselineById :one
SELECT baseline_id, code, title, description, start_date, duration, manager_id, estimator_id, created_at, updated_at FROM baselines WHERE baseline_id = $1
`

func (q *Queries) FindBaselineById(ctx context.Context, baselineID string) (Baseline, error) {
	row := q.db.QueryRow(ctx, findBaselineById, baselineID)
	var i Baseline
	err := row.Scan(
		&i.BaselineID,
		&i.Code,
		&i.Title,
		&i.Description,
		&i.StartDate,
		&i.Duration,
		&i.ManagerID,
		&i.EstimatorID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertBaseline = `-- name: InsertBaseline :exec
INSERT INTO
    baselines (
        baseline_id,
        code,
        title,
        description,
        start_date,
        duration,
        manager_id,
        estimator_id,
        created_at
    )
VALUES (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9
    )
`

type InsertBaselineParams struct {
	BaselineID  string
	Code        string
	Title       string
	Description pgtype.Text
	StartDate   pgtype.Date
	Duration    int32
	ManagerID   string
	EstimatorID string
	CreatedAt   pgtype.Timestamp
}

func (q *Queries) InsertBaseline(ctx context.Context, arg InsertBaselineParams) error {
	_, err := q.db.Exec(ctx, insertBaseline,
		arg.BaselineID,
		arg.Code,
		arg.Title,
		arg.Description,
		arg.StartDate,
		arg.Duration,
		arg.ManagerID,
		arg.EstimatorID,
		arg.CreatedAt,
	)
	return err
}

const updateBaseline = `-- name: UpdateBaseline :exec
UPDATE baselines
SET
    code = $2,
    title = $3,
    description = $4,
    start_date = $5,
    duration = $6,
    manager_id = $7,
    estimator_id = $8,
    updated_at = $9
WHERE
    baseline_id = $1
`

type UpdateBaselineParams struct {
	BaselineID  string
	Code        string
	Title       string
	Description pgtype.Text
	StartDate   pgtype.Date
	Duration    int32
	ManagerID   string
	EstimatorID string
	UpdatedAt   pgtype.Timestamp
}

func (q *Queries) UpdateBaseline(ctx context.Context, arg UpdateBaselineParams) error {
	_, err := q.db.Exec(ctx, updateBaseline,
		arg.BaselineID,
		arg.Code,
		arg.Title,
		arg.Description,
		arg.StartDate,
		arg.Duration,
		arg.ManagerID,
		arg.EstimatorID,
		arg.UpdatedAt,
	)
	return err
}
