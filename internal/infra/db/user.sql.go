// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteUser = `-- name: DeleteUser :one
DELETE FROM users WHERE user_id = $1 RETURNING user_id, email, user_name, name, user_type, created_at, updated_at
`

func (q *Queries) DeleteUser(ctx context.Context, userID string) (User, error) {
	row := q.db.QueryRow(ctx, deleteUser, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.UserName,
		&i.Name,
		&i.UserType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findAllUsers = `-- name: FindAllUsers :many
SELECT user_id, email, user_name, name, user_type, created_at, updated_at FROM users ORDER BY name ASC
`

func (q *Queries) FindAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, findAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.Email,
			&i.UserName,
			&i.Name,
			&i.UserType,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findUserByEmail = `-- name: FindUserByEmail :one
SELECT user_id, email, user_name, name, user_type, created_at, updated_at FROM users WHERE email = $1
`

func (q *Queries) FindUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, findUserByEmail, email)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.UserName,
		&i.Name,
		&i.UserType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findUserById = `-- name: FindUserById :one
SELECT user_id, email, user_name, name, user_type, created_at, updated_at FROM users WHERE user_id = $1
`

func (q *Queries) FindUserById(ctx context.Context, userID string) (User, error) {
	row := q.db.QueryRow(ctx, findUserById, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.UserName,
		&i.Name,
		&i.UserType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :exec
INSERT INTO
    users (
        user_id,
        email,
        user_name,
        name,
        user_type,
        created_at
    )
VALUES ($1, $2, $3, $4, $5, $6)
`

type InsertUserParams struct {
	UserID    string
	Email     string
	UserName  string
	Name      string
	UserType  string
	CreatedAt pgtype.Timestamp
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) error {
	_, err := q.db.Exec(ctx, insertUser,
		arg.UserID,
		arg.Email,
		arg.UserName,
		arg.Name,
		arg.UserType,
		arg.CreatedAt,
	)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET
    email = $2,
    user_name = $3,
    name = $4,
    user_type = $5,
    updated_at = $6
WHERE
    user_id = $1
`

type UpdateUserParams struct {
	UserID    string
	Email     string
	UserName  string
	Name      string
	UserType  string
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.UserID,
		arg.Email,
		arg.UserName,
		arg.Name,
		arg.UserType,
		arg.UpdatedAt,
	)
	return err
}
